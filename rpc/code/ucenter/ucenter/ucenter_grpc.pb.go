// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: proto/ucenter.proto

package ucenter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UcenterSqlx_GetUser_FullMethodName    = "/ucenter.ucenterSqlx/GetUser"
	UcenterSqlx_AddUser_FullMethodName    = "/ucenter.ucenterSqlx/AddUser"
	UcenterSqlx_DeleteUser_FullMethodName = "/ucenter.ucenterSqlx/DeleteUser"
	UcenterSqlx_LoginUser_FullMethodName  = "/ucenter.ucenterSqlx/LoginUser"
)

// UcenterSqlxClient is the client API for UcenterSqlx service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UcenterSqlxClient interface {
	// 获取用户信息
	GetUser(ctx context.Context, in *BaseModel, opts ...grpc.CallOption) (*User, error)
	// 添加用户
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*BaseResp, error)
	// 注销用户信息
	DeleteUser(ctx context.Context, in *BaseModel, opts ...grpc.CallOption) (*BaseResp, error)
	// 用户登录
	LoginUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserLoginResp, error)
}

type ucenterSqlxClient struct {
	cc grpc.ClientConnInterface
}

func NewUcenterSqlxClient(cc grpc.ClientConnInterface) UcenterSqlxClient {
	return &ucenterSqlxClient{cc}
}

func (c *ucenterSqlxClient) GetUser(ctx context.Context, in *BaseModel, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, UcenterSqlx_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucenterSqlxClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, UcenterSqlx_AddUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucenterSqlxClient) DeleteUser(ctx context.Context, in *BaseModel, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, UcenterSqlx_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucenterSqlxClient) LoginUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserLoginResp, error) {
	out := new(UserLoginResp)
	err := c.cc.Invoke(ctx, UcenterSqlx_LoginUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UcenterSqlxServer is the server API for UcenterSqlx service.
// All implementations must embed UnimplementedUcenterSqlxServer
// for forward compatibility
type UcenterSqlxServer interface {
	// 获取用户信息
	GetUser(context.Context, *BaseModel) (*User, error)
	// 添加用户
	AddUser(context.Context, *User) (*BaseResp, error)
	// 注销用户信息
	DeleteUser(context.Context, *BaseModel) (*BaseResp, error)
	// 用户登录
	LoginUser(context.Context, *User) (*UserLoginResp, error)
	mustEmbedUnimplementedUcenterSqlxServer()
}

// UnimplementedUcenterSqlxServer must be embedded to have forward compatible implementations.
type UnimplementedUcenterSqlxServer struct {
}

func (UnimplementedUcenterSqlxServer) GetUser(context.Context, *BaseModel) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUcenterSqlxServer) AddUser(context.Context, *User) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUcenterSqlxServer) DeleteUser(context.Context, *BaseModel) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUcenterSqlxServer) LoginUser(context.Context, *User) (*UserLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedUcenterSqlxServer) mustEmbedUnimplementedUcenterSqlxServer() {}

// UnsafeUcenterSqlxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UcenterSqlxServer will
// result in compilation errors.
type UnsafeUcenterSqlxServer interface {
	mustEmbedUnimplementedUcenterSqlxServer()
}

func RegisterUcenterSqlxServer(s grpc.ServiceRegistrar, srv UcenterSqlxServer) {
	s.RegisterService(&UcenterSqlx_ServiceDesc, srv)
}

func _UcenterSqlx_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UcenterSqlxServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UcenterSqlx_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UcenterSqlxServer).GetUser(ctx, req.(*BaseModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _UcenterSqlx_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UcenterSqlxServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UcenterSqlx_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UcenterSqlxServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UcenterSqlx_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UcenterSqlxServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UcenterSqlx_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UcenterSqlxServer).DeleteUser(ctx, req.(*BaseModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _UcenterSqlx_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UcenterSqlxServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UcenterSqlx_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UcenterSqlxServer).LoginUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// UcenterSqlx_ServiceDesc is the grpc.ServiceDesc for UcenterSqlx service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UcenterSqlx_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ucenter.ucenterSqlx",
	HandlerType: (*UcenterSqlxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UcenterSqlx_GetUser_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _UcenterSqlx_AddUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UcenterSqlx_DeleteUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _UcenterSqlx_LoginUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ucenter.proto",
}

const (
	UcenterGorm_GetUser_FullMethodName    = "/ucenter.ucenterGorm/GetUser"
	UcenterGorm_AddUser_FullMethodName    = "/ucenter.ucenterGorm/AddUser"
	UcenterGorm_DeleteUser_FullMethodName = "/ucenter.ucenterGorm/DeleteUser"
	UcenterGorm_LoginUser_FullMethodName  = "/ucenter.ucenterGorm/LoginUser"
)

// UcenterGormClient is the client API for UcenterGorm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UcenterGormClient interface {
	// 获取用户信息
	GetUser(ctx context.Context, in *BaseModel, opts ...grpc.CallOption) (*User, error)
	// 添加用户
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*BaseResp, error)
	// 注销用户信息
	DeleteUser(ctx context.Context, in *BaseModel, opts ...grpc.CallOption) (*BaseResp, error)
	// 用户登录
	LoginUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserLoginResp, error)
}

type ucenterGormClient struct {
	cc grpc.ClientConnInterface
}

func NewUcenterGormClient(cc grpc.ClientConnInterface) UcenterGormClient {
	return &ucenterGormClient{cc}
}

func (c *ucenterGormClient) GetUser(ctx context.Context, in *BaseModel, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, UcenterGorm_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucenterGormClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, UcenterGorm_AddUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucenterGormClient) DeleteUser(ctx context.Context, in *BaseModel, opts ...grpc.CallOption) (*BaseResp, error) {
	out := new(BaseResp)
	err := c.cc.Invoke(ctx, UcenterGorm_DeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ucenterGormClient) LoginUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*UserLoginResp, error) {
	out := new(UserLoginResp)
	err := c.cc.Invoke(ctx, UcenterGorm_LoginUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UcenterGormServer is the server API for UcenterGorm service.
// All implementations must embed UnimplementedUcenterGormServer
// for forward compatibility
type UcenterGormServer interface {
	// 获取用户信息
	GetUser(context.Context, *BaseModel) (*User, error)
	// 添加用户
	AddUser(context.Context, *User) (*BaseResp, error)
	// 注销用户信息
	DeleteUser(context.Context, *BaseModel) (*BaseResp, error)
	// 用户登录
	LoginUser(context.Context, *User) (*UserLoginResp, error)
	mustEmbedUnimplementedUcenterGormServer()
}

// UnimplementedUcenterGormServer must be embedded to have forward compatible implementations.
type UnimplementedUcenterGormServer struct {
}

func (UnimplementedUcenterGormServer) GetUser(context.Context, *BaseModel) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUcenterGormServer) AddUser(context.Context, *User) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedUcenterGormServer) DeleteUser(context.Context, *BaseModel) (*BaseResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUcenterGormServer) LoginUser(context.Context, *User) (*UserLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUser not implemented")
}
func (UnimplementedUcenterGormServer) mustEmbedUnimplementedUcenterGormServer() {}

// UnsafeUcenterGormServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UcenterGormServer will
// result in compilation errors.
type UnsafeUcenterGormServer interface {
	mustEmbedUnimplementedUcenterGormServer()
}

func RegisterUcenterGormServer(s grpc.ServiceRegistrar, srv UcenterGormServer) {
	s.RegisterService(&UcenterGorm_ServiceDesc, srv)
}

func _UcenterGorm_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UcenterGormServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UcenterGorm_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UcenterGormServer).GetUser(ctx, req.(*BaseModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _UcenterGorm_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UcenterGormServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UcenterGorm_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UcenterGormServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _UcenterGorm_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BaseModel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UcenterGormServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UcenterGorm_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UcenterGormServer).DeleteUser(ctx, req.(*BaseModel))
	}
	return interceptor(ctx, in, info, handler)
}

func _UcenterGorm_LoginUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UcenterGormServer).LoginUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UcenterGorm_LoginUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UcenterGormServer).LoginUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// UcenterGorm_ServiceDesc is the grpc.ServiceDesc for UcenterGorm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UcenterGorm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ucenter.ucenterGorm",
	HandlerType: (*UcenterGormServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _UcenterGorm_GetUser_Handler,
		},
		{
			MethodName: "AddUser",
			Handler:    _UcenterGorm_AddUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UcenterGorm_DeleteUser_Handler,
		},
		{
			MethodName: "LoginUser",
			Handler:    _UcenterGorm_LoginUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ucenter.proto",
}
